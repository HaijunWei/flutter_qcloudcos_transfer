// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class QCloudCosInitOptions {
  QCloudCosInitOptions({
    required this.regionName,
  });

  String regionName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['regionName'] = regionName;
    return pigeonMap;
  }

  static QCloudCosInitOptions decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return QCloudCosInitOptions(
      regionName: pigeonMap['regionName']! as String,
    );
  }
}

class QCloudCosUpdateOptions {
  QCloudCosUpdateOptions({
    required this.tempUploadPath,
    required this.bucket,
    required this.startTime,
    required this.expiredTime,
    required this.credentials,
    required this.filePath,
    required this.fileName,
  });

  String tempUploadPath;
  String bucket;
  int startTime;
  int expiredTime;
  QCloudCosCredentials credentials;
  String filePath;
  String fileName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['tempUploadPath'] = tempUploadPath;
    pigeonMap['bucket'] = bucket;
    pigeonMap['startTime'] = startTime;
    pigeonMap['expiredTime'] = expiredTime;
    pigeonMap['credentials'] = credentials.encode();
    pigeonMap['filePath'] = filePath;
    pigeonMap['fileName'] = fileName;
    return pigeonMap;
  }

  static QCloudCosUpdateOptions decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return QCloudCosUpdateOptions(
      tempUploadPath: pigeonMap['tempUploadPath']! as String,
      bucket: pigeonMap['bucket']! as String,
      startTime: pigeonMap['startTime']! as int,
      expiredTime: pigeonMap['expiredTime']! as int,
      credentials: QCloudCosCredentials.decode(pigeonMap['credentials']!)
,
      filePath: pigeonMap['filePath']! as String,
      fileName: pigeonMap['fileName']! as String,
    );
  }
}

class QCloudCosCredentials {
  QCloudCosCredentials({
    required this.sessionToken,
    required this.tmpSecretId,
    required this.tmpSecretKey,
  });

  String sessionToken;
  String tmpSecretId;
  String tmpSecretKey;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['sessionToken'] = sessionToken;
    pigeonMap['tmpSecretId'] = tmpSecretId;
    pigeonMap['tmpSecretKey'] = tmpSecretKey;
    return pigeonMap;
  }

  static QCloudCosCredentials decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return QCloudCosCredentials(
      sessionToken: pigeonMap['sessionToken']! as String,
      tmpSecretId: pigeonMap['tmpSecretId']! as String,
      tmpSecretKey: pigeonMap['tmpSecretKey']! as String,
    );
  }
}

class QCloudCosUpdateResult {
  QCloudCosUpdateResult({
    required this.path,
  });

  String path;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['path'] = path;
    return pigeonMap;
  }

  static QCloudCosUpdateResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return QCloudCosUpdateResult(
      path: pigeonMap['path']! as String,
    );
  }
}

class _QCloudCosApiCodec extends StandardMessageCodec {
  const _QCloudCosApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is QCloudCosCredentials) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is QCloudCosInitOptions) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is QCloudCosUpdateOptions) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is QCloudCosUpdateResult) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return QCloudCosCredentials.decode(readValue(buffer)!);
      
      case 129:       
        return QCloudCosInitOptions.decode(readValue(buffer)!);
      
      case 130:       
        return QCloudCosUpdateOptions.decode(readValue(buffer)!);
      
      case 131:       
        return QCloudCosUpdateResult.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class QCloudCosApi {
  /// Constructor for [QCloudCosApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  QCloudCosApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _QCloudCosApiCodec();

  Future<void> initialize(QCloudCosInitOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QCloudCosApi.initialize', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_options]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<QCloudCosUpdateResult> upload(QCloudCosUpdateOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QCloudCosApi.upload', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_options]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as QCloudCosUpdateResult?)!;
    }
  }

  Future<QCloudCosUpdateResult> multipartUpload(QCloudCosUpdateOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.QCloudCosApi.multipartUpload', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_options]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as QCloudCosUpdateResult?)!;
    }
  }
}
