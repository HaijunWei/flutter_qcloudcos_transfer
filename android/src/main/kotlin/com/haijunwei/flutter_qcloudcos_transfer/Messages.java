// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.haijunwei.flutter_qcloudcos_transfer;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QCloudCosInitOptions {
    private @NonNull String regionName;
    public @NonNull String getRegionName() { return regionName; }
    public void setRegionName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"regionName\" is null.");
      }
      this.regionName = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private QCloudCosInitOptions() {}
    public static final class Builder {
      private @Nullable String regionName;
      public @NonNull Builder setRegionName(@NonNull String setterArg) {
        this.regionName = setterArg;
        return this;
      }
      public @NonNull QCloudCosInitOptions build() {
        QCloudCosInitOptions pigeonReturn = new QCloudCosInitOptions();
        pigeonReturn.setRegionName(regionName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("regionName", regionName);
      return toMapResult;
    }
    static @NonNull QCloudCosInitOptions fromMap(@NonNull Map<String, Object> map) {
      QCloudCosInitOptions pigeonResult = new QCloudCosInitOptions();
      Object regionName = map.get("regionName");
      pigeonResult.setRegionName((String)regionName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QCloudCosUpdateOptions {
    private @NonNull String tempUploadPath;
    public @NonNull String getTempUploadPath() { return tempUploadPath; }
    public void setTempUploadPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tempUploadPath\" is null.");
      }
      this.tempUploadPath = setterArg;
    }

    private @NonNull String bucket;
    public @NonNull String getBucket() { return bucket; }
    public void setBucket(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bucket\" is null.");
      }
      this.bucket = setterArg;
    }

    private @NonNull Long startTime;
    public @NonNull Long getStartTime() { return startTime; }
    public void setStartTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"startTime\" is null.");
      }
      this.startTime = setterArg;
    }

    private @NonNull Long expiredTime;
    public @NonNull Long getExpiredTime() { return expiredTime; }
    public void setExpiredTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"expiredTime\" is null.");
      }
      this.expiredTime = setterArg;
    }

    private @NonNull QCloudCosCredentials credentials;
    public @NonNull QCloudCosCredentials getCredentials() { return credentials; }
    public void setCredentials(@NonNull QCloudCosCredentials setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"credentials\" is null.");
      }
      this.credentials = setterArg;
    }

    private @NonNull String filePath;
    public @NonNull String getFilePath() { return filePath; }
    public void setFilePath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filePath\" is null.");
      }
      this.filePath = setterArg;
    }

    private @NonNull String fileName;
    public @NonNull String getFileName() { return fileName; }
    public void setFileName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fileName\" is null.");
      }
      this.fileName = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private QCloudCosUpdateOptions() {}
    public static final class Builder {
      private @Nullable String tempUploadPath;
      public @NonNull Builder setTempUploadPath(@NonNull String setterArg) {
        this.tempUploadPath = setterArg;
        return this;
      }
      private @Nullable String bucket;
      public @NonNull Builder setBucket(@NonNull String setterArg) {
        this.bucket = setterArg;
        return this;
      }
      private @Nullable Long startTime;
      public @NonNull Builder setStartTime(@NonNull Long setterArg) {
        this.startTime = setterArg;
        return this;
      }
      private @Nullable Long expiredTime;
      public @NonNull Builder setExpiredTime(@NonNull Long setterArg) {
        this.expiredTime = setterArg;
        return this;
      }
      private @Nullable QCloudCosCredentials credentials;
      public @NonNull Builder setCredentials(@NonNull QCloudCosCredentials setterArg) {
        this.credentials = setterArg;
        return this;
      }
      private @Nullable String filePath;
      public @NonNull Builder setFilePath(@NonNull String setterArg) {
        this.filePath = setterArg;
        return this;
      }
      private @Nullable String fileName;
      public @NonNull Builder setFileName(@NonNull String setterArg) {
        this.fileName = setterArg;
        return this;
      }
      public @NonNull QCloudCosUpdateOptions build() {
        QCloudCosUpdateOptions pigeonReturn = new QCloudCosUpdateOptions();
        pigeonReturn.setTempUploadPath(tempUploadPath);
        pigeonReturn.setBucket(bucket);
        pigeonReturn.setStartTime(startTime);
        pigeonReturn.setExpiredTime(expiredTime);
        pigeonReturn.setCredentials(credentials);
        pigeonReturn.setFilePath(filePath);
        pigeonReturn.setFileName(fileName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("tempUploadPath", tempUploadPath);
      toMapResult.put("bucket", bucket);
      toMapResult.put("startTime", startTime);
      toMapResult.put("expiredTime", expiredTime);
      toMapResult.put("credentials", (credentials == null) ? null : credentials.toMap());
      toMapResult.put("filePath", filePath);
      toMapResult.put("fileName", fileName);
      return toMapResult;
    }
    static @NonNull QCloudCosUpdateOptions fromMap(@NonNull Map<String, Object> map) {
      QCloudCosUpdateOptions pigeonResult = new QCloudCosUpdateOptions();
      Object tempUploadPath = map.get("tempUploadPath");
      pigeonResult.setTempUploadPath((String)tempUploadPath);
      Object bucket = map.get("bucket");
      pigeonResult.setBucket((String)bucket);
      Object startTime = map.get("startTime");
      pigeonResult.setStartTime((startTime == null) ? null : ((startTime instanceof Integer) ? (Integer)startTime : (Long)startTime));
      Object expiredTime = map.get("expiredTime");
      pigeonResult.setExpiredTime((expiredTime == null) ? null : ((expiredTime instanceof Integer) ? (Integer)expiredTime : (Long)expiredTime));
      Object credentials = map.get("credentials");
      pigeonResult.setCredentials((credentials == null) ? null : QCloudCosCredentials.fromMap((Map)credentials));
      Object filePath = map.get("filePath");
      pigeonResult.setFilePath((String)filePath);
      Object fileName = map.get("fileName");
      pigeonResult.setFileName((String)fileName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QCloudCosCredentials {
    private @NonNull String sessionToken;
    public @NonNull String getSessionToken() { return sessionToken; }
    public void setSessionToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sessionToken\" is null.");
      }
      this.sessionToken = setterArg;
    }

    private @NonNull String tmpSecretId;
    public @NonNull String getTmpSecretId() { return tmpSecretId; }
    public void setTmpSecretId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tmpSecretId\" is null.");
      }
      this.tmpSecretId = setterArg;
    }

    private @NonNull String tmpSecretKey;
    public @NonNull String getTmpSecretKey() { return tmpSecretKey; }
    public void setTmpSecretKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tmpSecretKey\" is null.");
      }
      this.tmpSecretKey = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private QCloudCosCredentials() {}
    public static final class Builder {
      private @Nullable String sessionToken;
      public @NonNull Builder setSessionToken(@NonNull String setterArg) {
        this.sessionToken = setterArg;
        return this;
      }
      private @Nullable String tmpSecretId;
      public @NonNull Builder setTmpSecretId(@NonNull String setterArg) {
        this.tmpSecretId = setterArg;
        return this;
      }
      private @Nullable String tmpSecretKey;
      public @NonNull Builder setTmpSecretKey(@NonNull String setterArg) {
        this.tmpSecretKey = setterArg;
        return this;
      }
      public @NonNull QCloudCosCredentials build() {
        QCloudCosCredentials pigeonReturn = new QCloudCosCredentials();
        pigeonReturn.setSessionToken(sessionToken);
        pigeonReturn.setTmpSecretId(tmpSecretId);
        pigeonReturn.setTmpSecretKey(tmpSecretKey);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionToken", sessionToken);
      toMapResult.put("tmpSecretId", tmpSecretId);
      toMapResult.put("tmpSecretKey", tmpSecretKey);
      return toMapResult;
    }
    static @NonNull QCloudCosCredentials fromMap(@NonNull Map<String, Object> map) {
      QCloudCosCredentials pigeonResult = new QCloudCosCredentials();
      Object sessionToken = map.get("sessionToken");
      pigeonResult.setSessionToken((String)sessionToken);
      Object tmpSecretId = map.get("tmpSecretId");
      pigeonResult.setTmpSecretId((String)tmpSecretId);
      Object tmpSecretKey = map.get("tmpSecretKey");
      pigeonResult.setTmpSecretKey((String)tmpSecretKey);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QCloudCosUpdateResult {
    private @NonNull String path;
    public @NonNull String getPath() { return path; }
    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private QCloudCosUpdateResult() {}
    public static final class Builder {
      private @Nullable String path;
      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }
      public @NonNull QCloudCosUpdateResult build() {
        QCloudCosUpdateResult pigeonReturn = new QCloudCosUpdateResult();
        pigeonReturn.setPath(path);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("path", path);
      return toMapResult;
    }
    static @NonNull QCloudCosUpdateResult fromMap(@NonNull Map<String, Object> map) {
      QCloudCosUpdateResult pigeonResult = new QCloudCosUpdateResult();
      Object path = map.get("path");
      pigeonResult.setPath((String)path);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class QCloudCosApiCodec extends StandardMessageCodec {
    public static final QCloudCosApiCodec INSTANCE = new QCloudCosApiCodec();
    private QCloudCosApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return QCloudCosCredentials.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return QCloudCosInitOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return QCloudCosUpdateOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return QCloudCosUpdateResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof QCloudCosCredentials) {
        stream.write(128);
        writeValue(stream, ((QCloudCosCredentials) value).toMap());
      } else 
      if (value instanceof QCloudCosInitOptions) {
        stream.write(129);
        writeValue(stream, ((QCloudCosInitOptions) value).toMap());
      } else 
      if (value instanceof QCloudCosUpdateOptions) {
        stream.write(130);
        writeValue(stream, ((QCloudCosUpdateOptions) value).toMap());
      } else 
      if (value instanceof QCloudCosUpdateResult) {
        stream.write(131);
        writeValue(stream, ((QCloudCosUpdateResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface QCloudCosApi {
    void initialize(@NonNull QCloudCosInitOptions options);
    void upload(@NonNull QCloudCosUpdateOptions options, Result<QCloudCosUpdateResult> result);
    void multipartUpload(@NonNull QCloudCosUpdateOptions options, Result<QCloudCosUpdateResult> result);

    /** The codec used by QCloudCosApi. */
    static MessageCodec<Object> getCodec() {
      return QCloudCosApiCodec.INSTANCE;
    }

    /** Sets up an instance of `QCloudCosApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, QCloudCosApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QCloudCosApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              QCloudCosInitOptions optionsArg = (QCloudCosInitOptions)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              api.initialize(optionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QCloudCosApi.upload", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              QCloudCosUpdateOptions optionsArg = (QCloudCosUpdateOptions)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<QCloudCosUpdateResult> resultCallback = new Result<QCloudCosUpdateResult>() {
                public void success(QCloudCosUpdateResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.upload(optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QCloudCosApi.multipartUpload", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              QCloudCosUpdateOptions optionsArg = (QCloudCosUpdateOptions)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<QCloudCosUpdateResult> resultCallback = new Result<QCloudCosUpdateResult>() {
                public void success(QCloudCosUpdateResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.multipartUpload(optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
